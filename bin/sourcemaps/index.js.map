{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"../index.js","sourcesContent":["#!/usr/bin/env node\n\nimport 'ts-node/register';\nimport { join, dirname } from 'path';\nimport args from 'args';\nimport { createWriteStream, existsSync, createReadStream } from 'fs';\nimport { green, red } from 'colors';\nimport moment from 'moment';\nimport request from 'request';\nimport { Extract } from 'unzip';\nimport { remove, mkdir, copy } from 'fs-extra';\nimport { map, isString } from 'lodash';\nimport { PYIApplication } from 'pyi';\nimport { src, dest } from 'gulp';\nimport { init, write } from 'gulp-sourcemaps';\nimport { createProject } from 'gulp-typescript';\nimport merge from 'merge2';\nimport install from 'gulp-install';\nimport nodemon from 'gulp-nodemon';\n\nargs.command('create', 'create new project ...', async (name, sub, options) => {\n    if (!sub[0]) { return await console.log(red('not have project name ...')); }\n    await console.log(green(\n        'download https://github.com/huaqingyi/pyi-template/archive/master.zip ...'\n    ));\n    const time = moment().format('YYYY-MM-DD HH');\n    const pack = join(__dirname, `../.temp/${time}.zip`);\n    if (!existsSync(pack)) {\n        console.log(green(\n            'redownload https://github.com/huaqingyi/pyi-template/archive/master.zip ...'\n        ));\n        await new Promise((r) => remove(dirname(pack), r));\n        await new Promise((r) => mkdir(dirname(pack), r));\n        await new Promise((r) => request('http://github.com/huaqingyi/pyi-template/archive/master.zip')\n            .pipe(createWriteStream(pack)).on('close', r));\n    }\n    await console.log(green(\n        'download success ...'\n    ));\n\n    const unzipdir = join(dirname(pack), 'resource');\n    const packdir = join(unzipdir, 'pyi-template-master');\n\n    await new Promise((r) => createReadStream(pack)\n        .pipe(Extract({ path: unzipdir })).on('close', r));\n\n    await console.log(green(\n        'unzip success ...'\n    ));\n    const pdir = join(process.cwd(), sub[0]);\n\n    await copy(packdir, pdir);\n\n    await console.log(green(\n        'copy success ...'\n    ));\n}).command('build', 'build appliaction ...', async (name, sub) => {\n    if (!sub[0]) { return await console.log(red('not have application path ...')); }\n    const apath = join(process.cwd(), sub[0]);\n    const project = await import(apath);\n    const paths = await Promise.all(map(project, async (app) => {\n        const { _root } = app;\n        if (_root && _root() === PYIApplication) {\n            return await new Promise((r) => {\n                // tslint:disable-next-line:only-arrow-functions\n                app.prototype.run = (async function(...props: any) {\n                    await r(...props);\n                }.bind(app.prototype));\n                // tslint:disable-next-line:no-unused-expression\n                new (app as any)();\n            });\n        } else {\n            return false;\n        }\n    }));\n    let ps: string[] = [];\n    map(paths, (path: string[] | string | false) => {\n        if (path !== false) {\n            if (isString(path)) { path = [path]; }\n            ps = ps.concat(path);\n        }\n    });\n    const outpath = join(dirname(apath), '../app');\n    const tsr = src(ps).pipe(init()).pipe(createProject(require('../package.json').compilerOptions)());\n    const tscr = await merge([\n        tsr.dts.pipe(dest(outpath)),\n        tsr.js.pipe(write('./sourcemaps'))\n            .pipe(dest(outpath))\n    ]).pipe(install());\n    return tscr;\n});\n\nargs.parse(process.argv);\n"]}